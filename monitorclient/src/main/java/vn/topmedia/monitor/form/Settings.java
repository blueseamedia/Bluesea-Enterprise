/*
 * Copyright (c) 2011 Topmedia Company
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package vn.topmedia.monitor.form;

import java.awt.Dimension;
import java.awt.event.ActionListener;
import javax.swing.JPanel;
import javax.swing.KeyStroke;
import vn.topmedia.monitor.bean.MonitorSettingBean;
import vn.topmedia.monitor.commons.Constants;

/**
 * Setting Monitor Client
 *
 * @author Anh Tuan <tuanta@topmedia.vn>
 */
public class Settings extends javax.swing.JDialog {

    /**
     * Creates new form Settings
     */
    public Settings(javax.swing.JFrame parent, boolean modal, SMSMonitor smsMonitor) {
        super(parent, modal);
        initComponents();
        Dimension d = parent.getSize();
        this.setLocation((d.width - this.getWidth()) / 2, (d.height - this.getHeight()) / 3);
        this.monitor = smsMonitor;
        this.activeUser = smsMonitor.getMonitorUser();

        setMonitorUsersBean();
        setAlert();

        jPanel1.registerKeyboardAction(new ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent actionEvent) {
                jBtnCancelActionPerformed(actionEvent);
            }
        }, KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0, false),
                JPanel.WHEN_IN_FOCUSED_WINDOW);
    }

    private void setMonitorUsersBean() {
        jTxtMonitorUser.setText(activeUser.getUserName());
        jTxtMonitorPassword.setText(activeUser.getPassword());
        jTxtMonitorVitualHost.setText(activeUser.getVitualHost());
        jTxtMonitorIP.setText(activeUser.getUserIP());
        jTxtMonitorPort.setText(String.valueOf(activeUser.getUserPort()));
        chkDebug.setSelected(activeUser.getDebugMode());
        chkTip.setSelected(activeUser.getShowTipError());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGrpMobileOperator = new javax.swing.ButtonGroup();
        btnGrpAlert = new javax.swing.ButtonGroup();
        jBtnOK = new javax.swing.JButton();
        jBtnCancel = new javax.swing.JButton();
        jBtnApply = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLblMonitorIP = new javax.swing.JLabel();
        jTxtMonitorIP = new javax.swing.JTextField();
        jLblMonitorPort = new javax.swing.JLabel();
        jTxtMonitorPort = new javax.swing.JTextField();
        jLblUserName = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        radBeep = new javax.swing.JRadioButton();
        radMute = new javax.swing.JRadioButton();
        chkTip = new javax.swing.JCheckBox();
        jLblPassword = new javax.swing.JLabel();
        jTxtMonitorVitualHost = new javax.swing.JTextField();
        jTxtMonitorUser = new javax.swing.JTextField();
        jLblVitualHost = new javax.swing.JLabel();
        jTxtMonitorPassword = new javax.swing.JTextField();
        chkDebug = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Settings");
        setResizable(false);

        jBtnOK.setText("Reload");
        jBtnOK.setToolTipText("Reload config");
        jBtnOK.setEnabled(false);
        jBtnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnOKActionPerformed(evt);
            }
        });

        jBtnCancel.setText("Cancel");
        jBtnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCancelActionPerformed(evt);
            }
        });

        jBtnApply.setText("Apply");
        jBtnApply.setEnabled(false);
        jBtnApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnApplyActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Monitor"));

        jLblMonitorIP.setText("IP:");

        jTxtMonitorIP.setText("210.211.97.115");
        jTxtMonitorIP.setToolTipText("IP Rabbit Server");
        jTxtMonitorIP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTxtMonitorIPKeyTyped(evt);
            }
        });

        jLblMonitorPort.setText("Port:");

        jTxtMonitorPort.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTxtMonitorPort.setText("5672");
        jTxtMonitorPort.setToolTipText("Port Rabbit Server");
        jTxtMonitorPort.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTxtMonitorPortKeyTyped(evt);
            }
        });

        jLblUserName.setText("User:");

        jLabel1.setText("Alert:");

        btnGrpAlert.add(radBeep);
        radBeep.setSelected(true);
        radBeep.setText("Beep");
        radBeep.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        radBeep.setMargin(new java.awt.Insets(0, 0, 0, 0));
        radBeep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radBeepActionPerformed(evt);
            }
        });

        btnGrpAlert.add(radMute);
        radMute.setText("Mute");
        radMute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radMuteActionPerformed(evt);
            }
        });

        chkTip.setSelected(true);
        chkTip.setText("Balloon Tip");
        chkTip.setToolTipText("Tool tip system tray");
        chkTip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkTipActionPerformed(evt);
            }
        });

        jLblPassword.setText("Password:");

        jTxtMonitorVitualHost.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTxtMonitorVitualHost.setText("/monitor");
        jTxtMonitorVitualHost.setToolTipText("Vitual Host Rabbit Server");
        jTxtMonitorVitualHost.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTxtMonitorVitualHostKeyTyped(evt);
            }
        });

        jTxtMonitorUser.setText("monitor");
        jTxtMonitorUser.setToolTipText("User Rabbit Server");
        jTxtMonitorUser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTxtMonitorUserKeyTyped(evt);
            }
        });

        jLblVitualHost.setText("Vitual Host:");

        jTxtMonitorPassword.setText("monitor");
        jTxtMonitorPassword.setToolTipText("Password Rabbit Server");
        jTxtMonitorPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTxtMonitorPasswordKeyTyped(evt);
            }
        });

        chkDebug.setText("Debug mode");
        chkDebug.setToolTipText("View debug console");
        chkDebug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkDebugActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel1)
                    .add(jLblUserName)
                    .add(jLblPassword)
                    .add(jLblVitualHost))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jTxtMonitorPassword, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 99, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jTxtMonitorUser, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 99, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLblMonitorIP)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLblMonitorPort))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jTxtMonitorPort)
                            .add(jTxtMonitorIP)))
                    .add(jTxtMonitorVitualHost)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(chkDebug)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 17, Short.MAX_VALUE)
                        .add(chkTip)
                        .add(18, 18, 18)
                        .add(radBeep)
                        .add(18, 18, 18)
                        .add(radMute)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTxtMonitorPort, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLblMonitorPort)
                    .add(jTxtMonitorUser, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLblUserName))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTxtMonitorIP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLblMonitorIP)
                    .add(jLblPassword)
                    .add(jTxtMonitorPassword, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLblVitualHost)
                    .add(jTxtMonitorVitualHost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(chkTip)
                    .add(radBeep)
                    .add(radMute)
                    .add(chkDebug))
                .add(36, 36, 36))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(64, 64, 64)
                        .add(jBtnOK, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(33, 33, 33)
                        .add(jBtnApply)
                        .add(33, 33, 33)
                        .add(jBtnCancel)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 128, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jBtnOK)
                    .add(jBtnApply)
                    .add(jBtnCancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void radBeepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radBeepActionPerformed
        // TODO add your handling code here:
        jBtnApply.setEnabled(true);
    }//GEN-LAST:event_radBeepActionPerformed

    private void jTxtMonitorIPKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtMonitorIPKeyTyped
        // TODO add your handling code here:
        if (!activeUser.getUserIP().equals(jTxtMonitorIP.getText().trim())) {
            jBtnOK.setEnabled(true);
        }
        jBtnApply.setEnabled(true);
    }//GEN-LAST:event_jTxtMonitorIPKeyTyped

    private void jTxtMonitorPortKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtMonitorPortKeyTyped
        // TODO add your handling code here:
        if (activeUser.getUserPort() != Integer.valueOf(jTxtMonitorPort.getText().trim())) {
            jBtnOK.setEnabled(true);
        }
        jBtnApply.setEnabled(true);
    }//GEN-LAST:event_jTxtMonitorPortKeyTyped

    private void jBtnApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnApplyActionPerformed
        // TODO add your handling code here:
        //Chay rieng 1 thread de khong bi treo
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                setAlertType();
                setSelectedUserInfo();
                monitor.setMonitorUsersBean(activeUser);
                monitor.updateMonitor(false);
                jBtnApply.setEnabled(false);
            }
        });
        this.dispose();
    }//GEN-LAST:event_jBtnApplyActionPerformed

    private void jBtnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnOKActionPerformed
        // TODO add your handling code here:
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                setAlertType();
                setSelectedUserInfo();
                monitor.setMonitorUsersBean(activeUser);
                monitor.updateMonitor(true);
                jBtnApply.setEnabled(false);
            }
        });
        this.dispose();
    }//GEN-LAST:event_jBtnOKActionPerformed

    private void jBtnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCancelActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jBtnCancelActionPerformed

    private void chkTipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkTipActionPerformed
        // TODO add your handling code here:
        jBtnApply.setEnabled(true);
    }//GEN-LAST:event_chkTipActionPerformed

    private void radMuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radMuteActionPerformed
        // TODO add your handling code here:
        jBtnApply.setEnabled(true);
    }//GEN-LAST:event_radMuteActionPerformed

    private void jTxtMonitorVitualHostKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtMonitorVitualHostKeyTyped
        // TODO add your handling code here:
        if (!activeUser.getVitualHost().equals(jTxtMonitorVitualHost.getText().trim())) {
            jBtnOK.setEnabled(true);
        }
        jBtnApply.setEnabled(true);
    }//GEN-LAST:event_jTxtMonitorVitualHostKeyTyped

    private void jTxtMonitorUserKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtMonitorUserKeyTyped
        // TODO add your handling code here:
        if (!activeUser.getUserName().equals(jTxtMonitorUser.getText().trim())) {
            jBtnOK.setEnabled(true);
        }
        jBtnApply.setEnabled(true);
    }//GEN-LAST:event_jTxtMonitorUserKeyTyped

    private void jTxtMonitorPasswordKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtMonitorPasswordKeyTyped
        // TODO add your handling code here:
        if (!activeUser.getPassword().equals(jTxtMonitorPassword.getText().trim())) {
            jBtnOK.setEnabled(true);
        }
        jBtnApply.setEnabled(true);
    }//GEN-LAST:event_jTxtMonitorPasswordKeyTyped

    private void chkDebugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkDebugActionPerformed
        // TODO add your handling code here:
        jBtnApply.setEnabled(true);
    }//GEN-LAST:event_chkDebugActionPerformed

    private void setSelectedUserInfo() {
        activeUser.setUserName(jTxtMonitorUser.getText().trim());
        activeUser.setPassword(jTxtMonitorPassword.getText().trim());
        activeUser.setVitualHost(jTxtMonitorVitualHost.getText().trim());
        activeUser.setUserIP(jTxtMonitorIP.getText().trim());
        activeUser.setUserPort(Integer.parseInt(jTxtMonitorPort.getText().trim()));
    }

    private void setAlertType() {
        //Set tool tip mode
        activeUser.setShowTipError(chkTip.isSelected());
        //Set debug mode
        activeUser.setDebugMode(chkDebug.isSelected());
        if (radBeep.isSelected()) {
            activeUser.setAlertType(Constants.ALERT_BEEP);
        }
        if (radMute.isSelected()) {
            activeUser.setAlertType(Constants.ALERT_MUTE);
        }
    }

    private void setAlert() {
        chkTip.setSelected(activeUser.getShowTipError());
        if (activeUser.getAlertType() == Constants.ALERT_BEEP) {
            radBeep.setSelected(true);
        } else if (activeUser.getAlertType() == Constants.ALERT_MUTE) {
            radMute.setSelected(true);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btnGrpAlert;
    private javax.swing.ButtonGroup btnGrpMobileOperator;
    private javax.swing.JCheckBox chkDebug;
    private javax.swing.JCheckBox chkTip;
    private javax.swing.JButton jBtnApply;
    private javax.swing.JButton jBtnCancel;
    private javax.swing.JButton jBtnOK;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLblMonitorIP;
    private javax.swing.JLabel jLblMonitorPort;
    private javax.swing.JLabel jLblPassword;
    private javax.swing.JLabel jLblUserName;
    private javax.swing.JLabel jLblVitualHost;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTxtMonitorIP;
    private javax.swing.JTextField jTxtMonitorPassword;
    private javax.swing.JTextField jTxtMonitorPort;
    private javax.swing.JTextField jTxtMonitorUser;
    private javax.swing.JTextField jTxtMonitorVitualHost;
    private javax.swing.JRadioButton radBeep;
    private javax.swing.JRadioButton radMute;
    // End of variables declaration//GEN-END:variables
    private SMSMonitor monitor;
    private MonitorSettingBean activeUser;
}
